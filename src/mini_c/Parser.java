
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 11 17:35:32 MSK 2022
//----------------------------------------------------

package mini_c;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 11 17:35:32 MSK 2022
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\003\003\000\002\006\005\000\002\006\006" +
    "\000\002\016\004\000\002\004\010\000\002\004\012\000" +
    "\002\011\004\000\002\011\006\000\002\012\006\000\002" +
    "\017\003\000\002\017\005\000\002\017\004\000\002\017" +
    "\004\000\002\017\007\000\002\017\011\000\002\017\004" +
    "\000\002\017\007\000\002\017\013\000\002\017\003\000" +
    "\002\020\003\000\002\020\005\000\002\021\003\000\002" +
    "\021\003\000\002\021\004\000\002\021\004\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\006\000\002\021\005\000\002\021" +
    "\007\000\002\024\003\000\002\024\002\000\002\023\005" +
    "\000\002\023\003\000\002\014\005\000\002\014\003\000" +
    "\002\015\005\000\002\015\003\000\002\010\003\000\002" +
    "\010\005\000\002\010\002\000\002\005\004\000\002\005" +
    "\002\000\002\007\004\000\002\007\002\000\002\013\004" +
    "\000\002\013\002\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\010\002\uffcb\007\011\010\006\001\002\000" +
    "\010\002\uffcb\007\011\010\006\001\002\000\004\002\211" +
    "\001\002\000\004\004\012\001\002\000\010\002\ufffe\007" +
    "\ufffe\010\ufffe\001\002\000\004\002\000\001\002\000\004" +
    "\004\012\001\002\000\044\006\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\040" +
    "\uffc6\001\002\000\004\017\014\001\002\000\010\007\017" +
    "\010\016\020\uffcd\001\002\000\006\020\uffcf\023\174\001" +
    "\002\000\004\004\012\001\002\000\004\004\012\001\002" +
    "\000\004\020\021\001\002\000\004\021\023\001\002\000" +
    "\010\002\ufffa\007\ufffa\010\ufffa\001\002\000\044\004\uffc9" +
    "\005\uffc9\007\027\010\025\011\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\017\uffc9\021\uffc9\022\uffc9\032\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\001\002\000\044\004\uffc9\005" +
    "\uffc9\007\027\010\025\011\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\021\uffc9\022\uffc9\032\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\001\002\000\004\004\012\001\002" +
    "\000\040\004\012\005\053\011\047\013\043\014\054\015" +
    "\046\016\036\017\042\021\023\022\uffc7\032\052\037\044" +
    "\040\040\041\051\042\037\001\002\000\004\004\012\001" +
    "\002\000\004\040\034\001\002\000\006\023\032\040\uffd2" +
    "\001\002\000\004\004\012\001\002\000\004\040\uffd3\001" +
    "\002\000\044\004\ufffd\005\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\021\ufffd\022" +
    "\ufffd\032\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\001\002" +
    "\000\042\004\uffec\005\uffec\011\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\016\uffec\017\uffec\021\uffec\022\uffec\032\uffec" +
    "\037\uffec\040\uffec\041\uffec\042\uffec\001\002\000\004\017" +
    "\153\001\002\000\004\040\152\001\002\000\042\004\ufff5" +
    "\005\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\021\ufff5\022\ufff5\032\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\042\ufff5\001\002\000\032\006\065\025\064\026" +
    "\063\027\070\030\067\031\071\032\062\033\074\034\073" +
    "\035\066\036\072\040\151\001\002\000\016\004\012\005" +
    "\053\016\036\017\042\032\052\037\044\001\002\000\004" +
    "\017\143\001\002\000\016\004\012\005\053\016\036\017" +
    "\042\032\052\037\044\001\002\000\004\022\141\001\002" +
    "\000\016\004\012\005\053\016\036\017\042\032\052\037" +
    "\044\001\002\000\004\017\131\001\002\000\042\006\uffeb" +
    "\017\122\020\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\040\uffeb\001\002\000\004\040\121\001\002\000" +
    "\016\004\012\005\053\016\036\017\042\032\052\037\044" +
    "\001\002\000\036\006\uffe8\020\uffe8\023\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\040\uffe8\001\002\000\004\017\110\001" +
    "\002\000\040\006\uffe9\020\uffe9\023\uffe9\024\060\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\040\uffe9\001\002\000\040\004\012" +
    "\005\053\011\047\013\043\014\054\015\046\016\036\017" +
    "\042\021\023\022\uffc7\032\052\037\044\040\040\041\051" +
    "\042\037\001\002\000\004\022\uffc8\001\002\000\016\004" +
    "\012\005\053\016\036\017\042\032\052\037\044\001\002" +
    "\000\036\006\065\020\uffe5\023\uffe5\025\064\026\063\027" +
    "\070\030\067\031\071\032\062\033\074\034\073\035\066" +
    "\036\072\040\uffe5\001\002\000\016\004\012\005\053\016" +
    "\036\017\042\032\052\037\044\001\002\000\016\004\012" +
    "\005\053\016\036\017\042\032\052\037\044\001\002\000" +
    "\016\004\012\005\053\016\036\017\042\032\052\037\044" +
    "\001\002\000\016\004\012\005\053\016\036\017\042\032" +
    "\052\037\044\001\002\000\016\004\012\005\053\016\036" +
    "\017\042\032\052\037\044\001\002\000\016\004\012\005" +
    "\053\016\036\017\042\032\052\037\044\001\002\000\016" +
    "\004\012\005\053\016\036\017\042\032\052\037\044\001" +
    "\002\000\016\004\012\005\053\016\036\017\042\032\052" +
    "\037\044\001\002\000\004\004\012\001\002\000\016\004" +
    "\012\005\053\016\036\017\042\032\052\037\044\001\002" +
    "\000\016\004\012\005\053\016\036\017\042\032\052\037" +
    "\044\001\002\000\036\006\uffe0\020\uffe0\023\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\072\040\uffe0\001\002\000\036\006\uffdf" +
    "\020\uffdf\023\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\072\040\uffdf" +
    "\001\002\000\040\006\uffea\020\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\040\uffea\001\002\000\036\006" +
    "\uffe2\020\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\074\034\073\035\066\036\072\040" +
    "\uffe2\001\002\000\036\006\065\020\uffe4\023\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\071\032\062\033\074\034" +
    "\073\035\066\036\072\040\uffe4\001\002\000\036\006\065" +
    "\020\uffe3\023\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\071\032\062\033\074\034\073\035\066\036\072\040\uffe3" +
    "\001\002\000\036\006\uffde\020\uffde\023\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\uffde\036\072\040\uffde\001\002\000\036\006\uffdd\020" +
    "\uffdd\023\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\071" +
    "\032\062\033\074\034\073\035\066\036\072\040\uffdd\001" +
    "\002\000\036\006\065\020\uffdb\023\uffdb\025\uffdb\026\063" +
    "\027\070\030\067\031\071\032\062\033\074\034\073\035" +
    "\066\036\072\040\uffdb\001\002\000\036\006\065\020\uffdc" +
    "\023\uffdc\025\uffdc\026\uffdc\027\070\030\067\031\071\032" +
    "\062\033\074\034\073\035\066\036\072\040\uffdc\001\002" +
    "\000\036\006\uffe1\020\uffe1\023\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\074\034\073\035\066" +
    "\036\072\040\uffe1\001\002\000\016\004\012\005\053\016" +
    "\036\017\042\032\052\037\044\001\002\000\032\006\065" +
    "\025\064\026\063\027\070\030\067\031\071\032\062\033" +
    "\074\034\073\035\066\036\072\040\112\001\002\000\016" +
    "\004\012\005\053\016\036\017\042\032\052\037\044\001" +
    "\002\000\032\006\065\025\064\026\063\027\070\030\067" +
    "\031\071\032\062\033\074\034\073\035\066\036\072\040" +
    "\114\001\002\000\016\004\012\005\053\016\036\017\042" +
    "\032\052\037\044\001\002\000\032\006\065\020\116\025" +
    "\064\026\063\027\070\030\067\031\071\032\062\033\074" +
    "\034\073\035\066\036\072\001\002\000\036\004\012\005" +
    "\053\011\047\013\043\014\054\015\046\016\036\017\042" +
    "\021\023\032\052\037\044\040\040\041\051\042\037\001" +
    "\002\000\042\004\uffed\005\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\021\uffed\022\uffed\032" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\001\002\000\036" +
    "\006\uffe7\020\uffe7\023\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\072" +
    "\040\uffe7\001\002\000\042\004\ufff3\005\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\021\ufff3" +
    "\022\ufff3\032\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\001" +
    "\002\000\020\004\012\005\053\016\036\017\042\020\uffd6" +
    "\032\052\037\044\001\002\000\004\020\130\001\002\000" +
    "\004\020\uffd7\001\002\000\034\006\065\020\uffd4\023\126" +
    "\025\064\026\063\027\070\030\067\031\071\032\062\033" +
    "\074\034\073\035\066\036\072\001\002\000\016\004\012" +
    "\005\053\016\036\017\042\032\052\037\044\001\002\000" +
    "\004\020\uffd5\001\002\000\036\006\uffda\020\uffda\023\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\040\uffda\001\002\000\016" +
    "\004\012\005\053\016\036\017\042\032\052\037\044\001" +
    "\002\000\032\006\065\020\133\025\064\026\063\027\070" +
    "\030\067\031\071\032\062\033\074\034\073\035\066\036" +
    "\072\001\002\000\036\004\012\005\053\011\047\013\043" +
    "\014\054\015\046\016\036\017\042\021\023\032\052\037" +
    "\044\040\040\041\051\042\037\001\002\000\042\004\ufff1" +
    "\005\ufff1\011\ufff1\012\135\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\021\ufff1\022\ufff1\032\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\001\002\000\036\004\012\005\053\011" +
    "\047\013\043\014\054\015\046\016\036\017\042\021\023" +
    "\032\052\037\044\040\040\041\051\042\037\001\002\000" +
    "\042\004\ufff0\005\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\021\ufff0\022\ufff0\032\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\001\002\000\032\006\065" +
    "\025\064\026\063\027\070\030\067\031\071\032\062\033" +
    "\074\034\073\035\066\036\072\040\140\001\002\000\042" +
    "\004\ufff4\005\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\021\ufff4\022\ufff4\032\ufff4\037\ufff4" +
    "\040\ufff4\041\ufff4\042\ufff4\001\002\000\050\002\ufff6\004" +
    "\ufff6\005\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\017\ufff6\021\ufff6\022\ufff6\032" +
    "\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\001\002\000\036" +
    "\006\uffe6\020\uffe6\023\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\072" +
    "\040\uffe6\001\002\000\016\004\012\005\053\016\036\017" +
    "\042\032\052\037\044\001\002\000\032\006\065\020\145" +
    "\025\064\026\063\027\070\030\067\031\071\032\062\033" +
    "\074\034\073\035\066\036\072\001\002\000\036\004\012" +
    "\005\053\011\047\013\043\014\054\015\046\016\036\017" +
    "\042\021\023\032\052\037\044\040\040\041\051\042\037" +
    "\001\002\000\042\004\uffee\005\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\021\uffee\022\uffee" +
    "\032\uffee\037\uffee\040\uffee\041\uffee\042\uffee\001\002\000" +
    "\032\006\065\020\150\025\064\026\063\027\070\030\067" +
    "\031\071\032\062\033\074\034\073\035\066\036\072\001" +
    "\002\000\036\006\uffd9\020\uffd9\023\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\040\uffd9\001\002\000\042\004\uffef\005\uffef" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\021\uffef\022\uffef\032\uffef\037\uffef\040\uffef\041\uffef" +
    "\042\uffef\001\002\000\042\004\ufff2\005\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\021\ufff2" +
    "\022\ufff2\032\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\001" +
    "\002\000\004\010\154\001\002\000\004\004\012\001\002" +
    "\000\004\020\156\001\002\000\036\006\uffd8\020\uffd8\023" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8\001\002\000" +
    "\004\033\162\001\002\000\004\040\166\001\002\000\006" +
    "\023\164\040\uffd0\001\002\000\004\004\012\001\002\000" +
    "\006\023\ufffb\040\ufffb\001\002\000\004\033\162\001\002" +
    "\000\004\040\uffd1\001\002\000\044\004\ufffc\005\ufffc\007" +
    "\ufffc\010\ufffc\011\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\021\ufffc\022\ufffc\032\ufffc\037\ufffc\040\ufffc\041" +
    "\ufffc\042\ufffc\001\002\000\040\004\uffca\005\uffca\011\uffca" +
    "\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\021\uffca\022" +
    "\uffca\032\uffca\037\uffca\040\uffca\041\uffca\042\uffca\001\002" +
    "\000\006\020\ufff8\023\ufff8\001\002\000\004\033\172\001" +
    "\002\000\004\004\012\001\002\000\006\020\ufff7\023\ufff7" +
    "\001\002\000\010\007\017\010\016\020\uffcd\001\002\000" +
    "\004\020\uffce\001\002\000\006\021\177\033\200\001\002" +
    "\000\010\007\027\010\025\022\uffc9\001\002\000\004\004" +
    "\012\001\002\000\004\017\202\001\002\000\010\007\017" +
    "\010\016\020\uffcd\001\002\000\004\020\204\001\002\000" +
    "\004\021\023\001\002\000\010\002\ufff9\007\ufff9\010\ufff9" +
    "\001\002\000\004\022\207\001\002\000\004\040\210\001" +
    "\002\000\010\002\uffff\007\uffff\010\uffff\001\002\000\004" +
    "\002\001\001\002\000\004\002\uffcc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\012\002\004\003\003\004\006\005\007\001" +
    "\001\000\010\003\003\004\006\005\211\001\001\000\002" +
    "\001\001\000\004\022\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\017\011\014\001\001\000" +
    "\002\001\001\000\004\022\170\001\001\000\004\022\167" +
    "\001\001\000\002\001\001\000\004\012\021\001\001\000" +
    "\002\001\001\000\006\006\023\007\025\001\001\000\006" +
    "\006\023\007\166\001\001\000\004\022\156\001\001\000" +
    "\016\012\034\013\044\017\055\020\054\021\040\022\047" +
    "\001\001\000\006\014\027\022\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\032\022\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\054\021\146\022\047\001\001\000" +
    "\002\001\001\000\010\020\054\021\141\022\047\001\001" +
    "\000\002\001\001\000\010\020\054\021\136\022\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\054\021\117\022\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\034" +
    "\013\056\017\055\020\054\021\040\022\047\001\001\000" +
    "\002\001\001\000\010\020\054\021\060\022\047\001\001" +
    "\000\002\001\001\000\010\020\054\021\106\022\047\001" +
    "\001\000\010\020\054\021\105\022\047\001\001\000\010" +
    "\020\054\021\104\022\047\001\001\000\010\020\054\021" +
    "\103\022\047\001\001\000\010\020\054\021\102\022\047" +
    "\001\001\000\010\020\054\021\101\022\047\001\001\000" +
    "\010\020\054\021\100\022\047\001\001\000\010\020\054" +
    "\021\077\022\047\001\001\000\004\022\076\001\001\000" +
    "\010\020\054\021\075\022\047\001\001\000\010\020\054" +
    "\021\074\022\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\054\021\110\022\047\001\001\000\002\001\001\000" +
    "\010\020\054\021\112\022\047\001\001\000\002\001\001" +
    "\000\010\020\054\021\114\022\047\001\001\000\002\001" +
    "\001\000\014\012\034\017\116\020\054\021\040\022\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\054\021\124\022\047\023\123\024\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\054\021\124\022\047\023\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\054\021" +
    "\131\022\047\001\001\000\002\001\001\000\014\012\034" +
    "\017\133\020\054\021\040\022\047\001\001\000\002\001" +
    "\001\000\014\012\034\017\135\020\054\021\040\022\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\054" +
    "\021\143\022\047\001\001\000\002\001\001\000\014\012" +
    "\034\017\145\020\054\021\040\022\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\157\016\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\162\001\001\000\002\001\001\000\006\015" +
    "\164\016\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\172\001\001\000\002\001\001\000\006\010\174" +
    "\011\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\023\007\205\001\001\000\004\022\200\001\001" +
    "\000\002\001\001\000\006\010\202\011\014\001\001\000" +
    "\002\001\001\000\004\012\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ident ::= IDENT 
            {
              Pstring RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pstring(id, new Loc(idleft, idright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ident",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // list_stmt ::= 
            {
              LinkedList<Pstmt> RESULT =null;
		 RESULT = new LinkedList<Pstmt>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // list_stmt ::= stmt list_stmt 
            {
              LinkedList<Pstmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Pstmt s = (Pstmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pstmt> l = (LinkedList<Pstmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.addFirst(s); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // list_decl_var ::= 
            {
              LinkedList<Pdeclvar> RESULT =null;
		 RESULT = new LinkedList<Pdeclvar>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_decl_var",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list_decl_var ::= decl_var list_decl_var 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Pdeclvar> d = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pdeclvar> l = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 for (Pdeclvar x: d) l.addFirst(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_decl_var",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list_decl ::= 
            {
              LinkedList<Pdecl> RESULT =null;
		 RESULT = new LinkedList<Pdecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list_decl ::= decl list_decl 
            {
              LinkedList<Pdecl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Pdecl d = (Pdecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pdecl> l = (LinkedList<Pdecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.addFirst(d); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list_comma_formal ::= 
            {
              LinkedList<Pdeclvar> RESULT =null;
		 RESULT = new LinkedList<Pdeclvar>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_formal",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list_comma_formal ::= formal COMMA list_comma_formal 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pdeclvar x = (Pdeclvar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pdeclvar> l = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_formal",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list_comma_formal ::= formal 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pdeclvar x = (Pdeclvar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Pdeclvar> l = new LinkedList<Pdeclvar>();
   	  l.addFirst(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_formal",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // nonempty_list_comma_star_ident ::= star_ident 
            {
              LinkedList<Pstring> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Pstring> l = new LinkedList<Pstring>();
      l.add(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_star_ident",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nonempty_list_comma_star_ident ::= star_ident COMMA nonempty_list_comma_star_ident 
            {
              LinkedList<Pstring> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pstring> l = (LinkedList<Pstring>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_star_ident",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nonempty_list_comma_ident ::= ident 
            {
              LinkedList<Pstring> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Pstring> l = new LinkedList<Pstring>();
      l.add(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_ident",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // nonempty_list_comma_ident ::= ident COMMA nonempty_list_comma_ident 
            {
              LinkedList<Pstring> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pstring> l = (LinkedList<Pstring>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_ident",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // nonempty_list_comma_expr ::= expr 
            {
              LinkedList<Pexpr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr x = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Pexpr> l = new LinkedList<Pexpr>();
      l.add(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // nonempty_list_comma_expr ::= expr COMMA nonempty_list_comma_expr 
            {
              LinkedList<Pexpr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr x = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pexpr> l = (LinkedList<Pexpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // list_comma_expr ::= 
            {
              LinkedList<Pexpr> RESULT =null;
		 RESULT = new LinkedList<Pexpr>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // list_comma_expr ::= nonempty_list_comma_expr 
            {
              LinkedList<Pexpr> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pexpr> l = (LinkedList<Pexpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= SIZEOF LP STRUCT ident RP 
            {
              Pexpr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Pstring id = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Psizeof(id, new Loc(opleft, opright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= LP expr RP 
            {
              Pexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Pexpr e = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= ident LP list_comma_expr RP 
            {
              Pexpr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Pstring f = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Pexpr> l = (LinkedList<Pexpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Pcall (f, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr BARBAR expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bor, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr AMPAMP expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Band, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr CMP expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Binop c = (Binop)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(c, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr MOD expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bmod, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr DIV expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bdiv, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr TIMES expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bmul, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr MINUS expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bsub, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr PLUS expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Badd, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr NEQ expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bneq, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr EQ expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Beq, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= lvalue EQUAL expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Plvalue e1 = (Plvalue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Passign(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= NOT expr 
            {
              Pexpr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Punop(Unop.Unot, e1, new Loc(opleft, opright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= MINUS expr 
            {
              Pexpr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Punop(Unop.Uneg, e1, new Loc(opleft, opright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= INTEGER 
            {
              Pexpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pint(c, new Loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= lvalue 
            {
              Pexpr RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Plvalue lv = (Plvalue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lvalue ::= expr ARROW ident 
            {
              Plvalue RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstring id = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parrow(e1, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lvalue ::= ident 
            {
              Plvalue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstring id = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pident(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= bloc 
            {
              Pstmt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pbloc b = (Pbloc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= FOR LP expr SEMICOLON expr SEMICOLON expr RP stmt 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int preleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Pexpr pre = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Pexpr cond = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int postleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int postright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr post = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstmt body = (Pstmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new Pfor(pre, cond, post, body, new Loc(locleft, locright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= WHILE LP expr RP stmt 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr c = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstmt s1 = (Pstmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new Pwhile(c, s1, new Loc(locleft, locright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= expr SEMICOLON 
            {
              Pstmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Pexpr e = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Peval(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= IF LP expr RP stmt ELSE stmt 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Pexpr c = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pstmt s1 = (Pstmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstmt s2 = (Pstmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new Pif(c, s1, s2, new Loc(locleft, locright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= IF LP expr RP stmt 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pexpr c = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstmt s1 = (Pstmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Loc locif = new Loc(locleft, locright);
       RESULT =  new Pif(c, s1, new Pskip(locif), locif); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= CONTINUE SEMICOLON 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Pcontinue(new Loc(locleft, locright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= BREAK SEMICOLON 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Pbreak(new Loc(locleft, locright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= RETURN expr SEMICOLON 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Pexpr e = (Pexpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Preturn(e, new Loc(locleft, locright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= SEMICOLON 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new Pskip(new Loc(locleft, locright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloc ::= LBRA list_decl_var list_stmt RBRA 
            {
              Pbloc RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Pdeclvar> vl = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Pstmt> sl = (LinkedList<Pstmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Pbloc(vl, sl, new Loc(locleft, locright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloc",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formal ::= STRUCT ident TIMES ident 
            {
              Pdeclvar RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pstring s = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pdeclvar(new PTstruct(s), x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formal ::= INT ident 
            {
              Pdeclvar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pdeclvar(Ptype.ptint, x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_fun ::= STRUCT ident TIMES ident LP list_comma_formal RP bloc 
            {
              Pdecl RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Pstring s = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Pstring f = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Pdeclvar> pl = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pbloc b = (Pbloc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pfun(new PTstruct(s), f, pl, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_fun",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl_fun ::= INT ident LP list_comma_formal RP bloc 
            {
              Pdecl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Pstring f = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Pdeclvar> pl = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pbloc b = (Pbloc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pfun(Ptype.ptint, f, pl, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_fun",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // star_ident ::= TIMES ident 
            {
              Pstring RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("star_ident",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl_var ::= STRUCT ident nonempty_list_comma_star_ident SEMICOLON 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pstring s = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Pstring> xl = (LinkedList<Pstring>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 LinkedList<Pdeclvar> l = new LinkedList<Pdeclvar>();
       Ptype ty = new PTstruct(s);
       for (Pstring x: xl) l.add(new Pdeclvar(ty, x));
       RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_var",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_var ::= INT nonempty_list_comma_ident SEMICOLON 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int xlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Pstring> xl = (LinkedList<Pstring>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 LinkedList<Pdeclvar> l = new LinkedList<Pdeclvar>();
       for (Pstring x: xl) l.add(new Pdeclvar(Ptype.ptint, x));
       RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_var",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl ::= decl_fun 
            {
              Pdecl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pdecl d = (Pdecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl ::= STRUCT ident LBRA list_decl_var RBRA SEMICOLON 
            {
              Pdecl RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Pstring s = (Pstring)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Pdeclvar> fl = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Pstruct(s, fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // file ::= list_decl 
            {
              Pfile RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Pdecl> l = (LinkedList<Pdecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pfile(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Pfile start_val = (Pfile)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

