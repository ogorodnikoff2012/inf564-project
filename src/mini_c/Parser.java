package mini_c;
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 10 16:30:46 MSK 2022
//----------------------------------------------------

import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 10 16:30:46 MSK 2022
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\003\003\000\002\006\005\000\002\006\006" +
    "\000\002\016\004\000\002\004\010\000\002\004\012\000" +
    "\002\011\004\000\002\011\006\000\002\012\006\000\002" +
    "\017\003\000\002\017\005\000\002\017\004\000\002\017" +
    "\004\000\002\017\007\000\002\017\011\000\002\017\004" +
    "\000\002\017\007\000\002\017\003\000\002\020\003\000" +
    "\002\020\005\000\002\021\003\000\002\021\003\000\002" +
    "\021\004\000\002\021\004\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\006\000\002" +
    "\021\005\000\002\021\007\000\002\024\003\000\002\024" +
    "\002\000\002\023\005\000\002\023\003\000\002\014\005" +
    "\000\002\014\003\000\002\015\005\000\002\015\003\000" +
    "\002\010\003\000\002\010\005\000\002\010\002\000\002" +
    "\005\004\000\002\005\002\000\002\007\004\000\002\007" +
    "\002\000\002\013\004\000\002\013\002\000\002\022\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\010\002\uffcd\007\011\010\006\001\002\000" +
    "\010\002\uffcd\007\011\010\006\001\002\000\004\002\176" +
    "\001\002\000\004\004\013\001\002\000\010\002\ufffe\007" +
    "\ufffe\010\ufffe\001\002\000\004\002\000\001\002\000\004" +
    "\004\013\001\002\000\004\016\014\001\002\000\042\006" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\036\uffc8\001\002\000\010\007\017\010\016" +
    "\017\uffcf\001\002\000\006\017\uffd1\022\161\001\002\000" +
    "\004\004\013\001\002\000\004\004\013\001\002\000\004" +
    "\017\021\001\002\000\004\020\023\001\002\000\010\002" +
    "\ufffa\007\ufffa\010\ufffa\001\002\000\042\004\uffcb\005\uffcb" +
    "\007\027\010\025\011\uffcb\013\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\020\uffcb\021\uffcb\031\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\001\002\000\042\004\uffcb\005\uffcb\007\027\010" +
    "\025\011\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\020\uffcb" +
    "\021\uffcb\031\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\001" +
    "\002\000\004\004\013\001\002\000\036\004\013\005\053" +
    "\011\047\013\043\014\046\015\036\016\042\020\023\021" +
    "\uffc9\031\052\035\045\036\040\037\051\040\037\001\002" +
    "\000\004\004\013\001\002\000\004\036\034\001\002\000" +
    "\006\022\032\036\uffd4\001\002\000\004\004\013\001\002" +
    "\000\004\036\uffd5\001\002\000\042\004\ufffd\005\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd" +
    "\020\ufffd\021\ufffd\031\ufffd\035\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\001\002\000\040\004\uffed\005\uffed\011\uffed\012\uffed" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\020\uffed\021\uffed\031" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\001\002\000\004" +
    "\016\140\001\002\000\004\036\137\001\002\000\040\004" +
    "\ufff5\005\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\020\ufff5\021\ufff5\031\ufff5\035\ufff5\036\ufff5\037" +
    "\ufff5\040\ufff5\001\002\000\030\006\064\024\063\025\062" +
    "\026\067\027\065\030\066\031\061\032\072\033\071\034" +
    "\070\036\136\001\002\000\016\004\013\005\053\015\036" +
    "\016\042\031\052\035\045\001\002\000\004\016\130\001" +
    "\002\000\004\021\127\001\002\000\016\004\013\005\053" +
    "\015\036\016\042\031\052\035\045\001\002\000\016\004" +
    "\013\005\053\015\036\016\042\031\052\035\045\001\002" +
    "\000\004\016\116\001\002\000\040\006\uffec\016\107\017" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\036\uffec\001" +
    "\002\000\004\036\106\001\002\000\016\004\013\005\053" +
    "\015\036\016\042\031\052\035\045\001\002\000\034\006" +
    "\uffe9\017\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\036\uffe9\001" +
    "\002\000\036\006\uffea\017\uffea\022\uffea\023\057\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\036\uffea\001\002\000\036\004\013\005\053" +
    "\011\047\013\043\014\046\015\036\016\042\020\023\021" +
    "\uffc9\031\052\035\045\036\040\037\051\040\037\001\002" +
    "\000\004\021\uffca\001\002\000\016\004\013\005\053\015" +
    "\036\016\042\031\052\035\045\001\002\000\034\006\064" +
    "\017\uffe6\022\uffe6\024\063\025\062\026\067\027\065\030" +
    "\066\031\061\032\072\033\071\034\070\036\uffe6\001\002" +
    "\000\016\004\013\005\053\015\036\016\042\031\052\035" +
    "\045\001\002\000\016\004\013\005\053\015\036\016\042" +
    "\031\052\035\045\001\002\000\016\004\013\005\053\015" +
    "\036\016\042\031\052\035\045\001\002\000\016\004\013" +
    "\005\053\015\036\016\042\031\052\035\045\001\002\000" +
    "\016\004\013\005\053\015\036\016\042\031\052\035\045" +
    "\001\002\000\016\004\013\005\053\015\036\016\042\031" +
    "\052\035\045\001\002\000\016\004\013\005\053\015\036" +
    "\016\042\031\052\035\045\001\002\000\004\004\013\001" +
    "\002\000\016\004\013\005\053\015\036\016\042\031\052" +
    "\035\045\001\002\000\016\004\013\005\053\015\036\016" +
    "\042\031\052\035\045\001\002\000\034\006\uffe1\017\uffe1" +
    "\022\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\070\036\uffe1\001\002\000\034" +
    "\006\uffe0\017\uffe0\022\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\070\036\uffe0" +
    "\001\002\000\036\006\uffeb\017\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\036\uffeb\001\002\000\034\006\064\017" +
    "\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\066" +
    "\031\061\032\072\033\071\034\070\036\uffe5\001\002\000" +
    "\034\006\uffe3\017\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\072\033\071\034\070\036" +
    "\uffe3\001\002\000\034\006\064\017\uffe4\022\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\030\066\031\061\032\072\033" +
    "\071\034\070\036\uffe4\001\002\000\034\006\uffdf\017\uffdf" +
    "\022\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\066\031" +
    "\061\032\072\033\071\034\070\036\uffdf\001\002\000\034" +
    "\006\064\017\uffdd\022\uffdd\024\uffdd\025\062\026\067\027" +
    "\065\030\066\031\061\032\072\033\071\034\070\036\uffdd" +
    "\001\002\000\034\006\064\017\uffde\022\uffde\024\uffde\025" +
    "\uffde\026\067\027\065\030\066\031\061\032\072\033\071" +
    "\034\070\036\uffde\001\002\000\034\006\uffe2\017\uffe2\022" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\072\033\071\034\070\036\uffe2\001\002\000\034\006" +
    "\uffe8\017\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\070\036\uffe8\001" +
    "\002\000\040\004\ufff3\005\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3\031\ufff3\035" +
    "\ufff3\036\ufff3\037\ufff3\040\ufff3\001\002\000\020\004\013" +
    "\005\053\015\036\016\042\017\uffd8\031\052\035\045\001" +
    "\002\000\004\017\115\001\002\000\004\017\uffd9\001\002" +
    "\000\032\006\064\017\uffd6\022\113\024\063\025\062\026" +
    "\067\027\065\030\066\031\061\032\072\033\071\034\070" +
    "\001\002\000\016\004\013\005\053\015\036\016\042\031" +
    "\052\035\045\001\002\000\004\017\uffd7\001\002\000\034" +
    "\006\uffdc\017\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\036\uffdc" +
    "\001\002\000\016\004\013\005\053\015\036\016\042\031" +
    "\052\035\045\001\002\000\030\006\064\017\120\024\063" +
    "\025\062\026\067\027\065\030\066\031\061\032\072\033" +
    "\071\034\070\001\002\000\034\004\013\005\053\011\047" +
    "\013\043\014\046\015\036\016\042\020\023\031\052\035" +
    "\045\036\040\037\051\040\037\001\002\000\040\004\ufff1" +
    "\005\ufff1\011\ufff1\012\122\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\020\ufff1\021\ufff1\031\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\001\002\000\034\004\013\005\053\011\047\013" +
    "\043\014\046\015\036\016\042\020\023\031\052\035\045" +
    "\036\040\037\051\040\037\001\002\000\040\004\ufff0\005" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\020\ufff0\021\ufff0\031\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\001\002\000\030\006\064\024\063\025\062\026\067" +
    "\027\065\030\066\031\061\032\072\033\071\034\070\036" +
    "\125\001\002\000\040\004\ufff4\005\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\016\ufff4\020\ufff4\021\ufff4\031" +
    "\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\001\002\000\034" +
    "\006\uffe7\017\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\070\036\uffe7" +
    "\001\002\000\046\002\ufff6\004\ufff6\005\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\020\ufff6\021\ufff6\031\ufff6\035\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\001\002\000\016\004\013\005\053\015\036\016\042" +
    "\031\052\035\045\001\002\000\030\006\064\017\132\024" +
    "\063\025\062\026\067\027\065\030\066\031\061\032\072" +
    "\033\071\034\070\001\002\000\034\004\013\005\053\011" +
    "\047\013\043\014\046\015\036\016\042\020\023\031\052" +
    "\035\045\036\040\037\051\040\037\001\002\000\040\004" +
    "\uffee\005\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee" +
    "\016\uffee\020\uffee\021\uffee\031\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\001\002\000\030\006\064\017\135\024\063" +
    "\025\062\026\067\027\065\030\066\031\061\032\072\033" +
    "\071\034\070\001\002\000\034\006\uffdb\017\uffdb\022\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\036\uffdb\001\002\000\040\004\uffef" +
    "\005\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016" +
    "\uffef\020\uffef\021\uffef\031\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\001\002\000\040\004\ufff2\005\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2" +
    "\031\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\001\002\000" +
    "\004\010\141\001\002\000\004\004\013\001\002\000\004" +
    "\017\143\001\002\000\034\006\uffda\017\uffda\022\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\036\uffda\001\002\000\004\032\147\001" +
    "\002\000\004\036\153\001\002\000\006\022\151\036\uffd2" +
    "\001\002\000\004\004\013\001\002\000\006\022\ufffb\036" +
    "\ufffb\001\002\000\004\032\147\001\002\000\004\036\uffd3" +
    "\001\002\000\042\004\ufffc\005\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\020\ufffc\021\ufffc" +
    "\031\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\001\002\000" +
    "\036\004\uffcc\005\uffcc\011\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\020\uffcc\021\uffcc\031\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\001\002\000\006\017\ufff8\022\ufff8\001\002" +
    "\000\004\032\157\001\002\000\004\004\013\001\002\000" +
    "\006\017\ufff7\022\ufff7\001\002\000\010\007\017\010\016" +
    "\017\uffcf\001\002\000\004\017\uffd0\001\002\000\006\020" +
    "\164\032\165\001\002\000\010\007\027\010\025\021\uffcb" +
    "\001\002\000\004\004\013\001\002\000\004\016\167\001" +
    "\002\000\010\007\017\010\016\017\uffcf\001\002\000\004" +
    "\017\171\001\002\000\004\020\023\001\002\000\010\002" +
    "\ufff9\007\ufff9\010\ufff9\001\002\000\004\021\174\001\002" +
    "\000\004\036\175\001\002\000\010\002\uffff\007\uffff\010" +
    "\uffff\001\002\000\004\002\001\001\002\000\004\002\uffce" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\012\002\004\003\003\004\006\005\007\001" +
    "\001\000\010\003\003\004\006\005\176\001\001\000\002" +
    "\001\001\000\004\022\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\017\011\014\001\001\000" +
    "\002\001\001\000\004\022\155\001\001\000\004\022\154" +
    "\001\001\000\002\001\001\000\004\012\021\001\001\000" +
    "\002\001\001\000\006\006\023\007\025\001\001\000\006" +
    "\006\023\007\153\001\001\000\004\022\143\001\001\000" +
    "\016\012\034\013\043\017\054\020\053\021\040\022\047" +
    "\001\001\000\006\014\027\022\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\032\022\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\053\021\133\022\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\053\021\125" +
    "\022\047\001\001\000\010\020\053\021\123\022\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\053\021\104\022\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\034\013\055\017\054" +
    "\020\053\021\040\022\047\001\001\000\002\001\001\000" +
    "\010\020\053\021\057\022\047\001\001\000\002\001\001" +
    "\000\010\020\053\021\103\022\047\001\001\000\010\020" +
    "\053\021\102\022\047\001\001\000\010\020\053\021\101" +
    "\022\047\001\001\000\010\020\053\021\100\022\047\001" +
    "\001\000\010\020\053\021\077\022\047\001\001\000\010" +
    "\020\053\021\076\022\047\001\001\000\010\020\053\021" +
    "\075\022\047\001\001\000\004\022\074\001\001\000\010" +
    "\020\053\021\073\022\047\001\001\000\010\020\053\021" +
    "\072\022\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\053\021\111\022\047\023\110\024\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\053\021\111\022\047\023\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\053\021" +
    "\116\022\047\001\001\000\002\001\001\000\014\012\034" +
    "\017\120\020\053\021\040\022\047\001\001\000\002\001" +
    "\001\000\014\012\034\017\122\020\053\021\040\022\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\053" +
    "\021\130\022\047\001\001\000\002\001\001\000\014\012" +
    "\034\017\132\020\053\021\040\022\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\144\016\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\147\001\001\000\002\001\001\000\006\015" +
    "\151\016\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\157\001\001\000\002\001\001\000\006\010\161" +
    "\011\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\023\007\172\001\001\000\004\022\165\001\001" +
    "\000\002\001\001\000\006\010\167\011\014\001\001\000" +
    "\002\001\001\000\004\012\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ident ::= IDENT 
            {
              Pstring RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pstring(id, new Loc(idleft, idright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // list_stmt ::= 
            {
              LinkedList<Pstmt> RESULT =null;
		 RESULT = new LinkedList<Pstmt>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list_stmt ::= stmt list_stmt 
            {
              LinkedList<Pstmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pstmt s = (Pstmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pstmt> l = (LinkedList<Pstmt>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(s); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list_decl_var ::= 
            {
              LinkedList<Pdeclvar> RESULT =null;
		 RESULT = new LinkedList<Pdeclvar>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_decl_var",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list_decl_var ::= decl_var list_decl_var 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Pdeclvar> d = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pdeclvar> l = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 for (Pdeclvar x: d) l.addFirst(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_decl_var",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list_decl ::= 
            {
              LinkedList<Pdecl> RESULT =null;
		 RESULT = new LinkedList<Pdecl>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list_decl ::= decl list_decl 
            {
              LinkedList<Pdecl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pdecl d = (Pdecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pdecl> l = (LinkedList<Pdecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(d); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list_comma_formal ::= 
            {
              LinkedList<Pdeclvar> RESULT =null;
		 RESULT = new LinkedList<Pdeclvar>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_formal",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // list_comma_formal ::= formal COMMA list_comma_formal 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pdeclvar x = (Pdeclvar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pdeclvar> l = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_formal",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // list_comma_formal ::= formal 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pdeclvar x = (Pdeclvar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Pdeclvar> l = new LinkedList<Pdeclvar>();
   	  l.addFirst(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_formal",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nonempty_list_comma_star_ident ::= star_ident 
            {
              LinkedList<Pstring> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Pstring> l = new LinkedList<Pstring>();
      l.add(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_star_ident",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // nonempty_list_comma_star_ident ::= star_ident COMMA nonempty_list_comma_star_ident 
            {
              LinkedList<Pstring> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pstring> l = (LinkedList<Pstring>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_star_ident",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // nonempty_list_comma_ident ::= ident 
            {
              LinkedList<Pstring> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Pstring> l = new LinkedList<Pstring>();
      l.add(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_ident",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // nonempty_list_comma_ident ::= ident COMMA nonempty_list_comma_ident 
            {
              LinkedList<Pstring> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pstring> l = (LinkedList<Pstring>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_ident",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // nonempty_list_comma_expr ::= expr 
            {
              LinkedList<Pexpr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr x = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Pexpr> l = new LinkedList<Pexpr>();
      l.add(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // nonempty_list_comma_expr ::= expr COMMA nonempty_list_comma_expr 
            {
              LinkedList<Pexpr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr x = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pexpr> l = (LinkedList<Pexpr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // list_comma_expr ::= 
            {
              LinkedList<Pexpr> RESULT =null;
		 RESULT = new LinkedList<Pexpr>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // list_comma_expr ::= nonempty_list_comma_expr 
            {
              LinkedList<Pexpr> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pexpr> l = (LinkedList<Pexpr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= SIZEOF LP STRUCT ident RP 
            {
              Pexpr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pstring id = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Psizeof(id, new Loc(opleft, opright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= LP expr RP 
            {
              Pexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pexpr e = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= ident LP list_comma_expr RP 
            {
              Pexpr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Pstring f = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Pexpr> l = (LinkedList<Pexpr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Pcall (f, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr BARBAR expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bor, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr AMPAMP expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Band, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr CMP expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Binop c = (Binop)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(c, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr DIV expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bdiv, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr TIMES expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bmul, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr MINUS expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bsub, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr PLUS expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Badd, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr NEQ expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bneq, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr EQ expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Beq, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= lvalue EQUAL expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Plvalue e1 = (Plvalue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Passign(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= NOT expr 
            {
              Pexpr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Punop(Unop.Unot, e1, new Loc(opleft, opright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= MINUS expr 
            {
              Pexpr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Punop(Unop.Uneg, e1, new Loc(opleft, opright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= INTEGER 
            {
              Pexpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pint(c, new Loc(cleft, cright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= lvalue 
            {
              Pexpr RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Plvalue lv = (Plvalue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lvalue ::= expr ARROW ident 
            {
              Plvalue RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstring id = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parrow(e1, id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lvalue ::= ident 
            {
              Plvalue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstring id = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pident(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= bloc 
            {
              Pstmt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pbloc b = (Pbloc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= WHILE LP expr RP stmt 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr c = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstmt s1 = (Pstmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Pwhile(c, s1, new Loc(locleft, locright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= expr SEMICOLON 
            {
              Pstmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pexpr e = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new Peval(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= IF LP expr RP stmt ELSE stmt 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Pexpr c = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pstmt s1 = (Pstmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstmt s2 = (Pstmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Pif(c, s1, s2, new Loc(locleft, locright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= IF LP expr RP stmt 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr c = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstmt s1 = (Pstmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Loc locif = new Loc(locleft, locright);
       RESULT =  new Pif(c, s1, new Pskip(locif), locif); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= CONTINUE SEMICOLON 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new Pcontinue(new Loc(locleft, locright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= BREAK SEMICOLON 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new Pbreak(new Loc(locleft, locright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= RETURN expr SEMICOLON 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pexpr e = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new Preturn(e, new Loc(locleft, locright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= SEMICOLON 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Pskip(new Loc(locleft, locright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloc ::= LBRA list_decl_var list_stmt RBRA 
            {
              Pbloc RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Pdeclvar> vl = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Pstmt> sl = (LinkedList<Pstmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Pbloc(vl, sl, new Loc(locleft, locright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloc",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formal ::= STRUCT ident TIMES ident 
            {
              Pdeclvar RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pstring s = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pdeclvar(new PTstruct(s), x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formal ::= INT ident 
            {
              Pdeclvar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pdeclvar(Ptype.ptint, x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_fun ::= STRUCT ident TIMES ident LP list_comma_formal RP bloc 
            {
              Pdecl RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Pstring s = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Pstring f = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Pdeclvar> pl = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pbloc b = (Pbloc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pfun(new PTstruct(s), f, pl, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_fun",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl_fun ::= INT ident LP list_comma_formal RP bloc 
            {
              Pdecl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Pstring f = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Pdeclvar> pl = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pbloc b = (Pbloc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pfun(Ptype.ptint, f, pl, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_fun",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // star_ident ::= TIMES ident 
            {
              Pstring RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("star_ident",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl_var ::= STRUCT ident nonempty_list_comma_star_ident SEMICOLON 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pstring s = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Pstring> xl = (LinkedList<Pstring>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<Pdeclvar> l = new LinkedList<Pdeclvar>();
       Ptype ty = new PTstruct(s);
       for (Pstring x: xl) l.add(new Pdeclvar(ty, x));
       RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_var",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_var ::= INT nonempty_list_comma_ident SEMICOLON 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int xlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Pstring> xl = (LinkedList<Pstring>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<Pdeclvar> l = new LinkedList<Pdeclvar>();
       for (Pstring x: xl) l.add(new Pdeclvar(Ptype.ptint, x));
       RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_var",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl ::= decl_fun 
            {
              Pdecl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pdecl d = (Pdecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl ::= STRUCT ident LBRA list_decl_var RBRA SEMICOLON 
            {
              Pdecl RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Pstring s = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Pdeclvar> fl = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Pstruct(s, fl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // file ::= list_decl 
            {
              Pfile RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pdecl> l = (LinkedList<Pdecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pfile(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pfile start_val = (Pfile)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

