// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/mini_c/Lexer.flex

package mini_c;

import java_cup.runtime.*;
import static mini_c.sym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\1\1\6\1\7\1\5\1\10\1\5\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\5\1\21"+
    "\1\22\7\23\2\24\1\5\1\25\1\26\1\27\1\30"+
    "\2\5\6\31\24\10\1\5\1\32\2\5\1\10\1\5"+
    "\1\33\1\34\1\35\1\31\1\36\1\37\1\10\1\40"+
    "\1\41\1\10\1\42\1\43\1\10\1\44\1\45\2\10"+
    "\1\46\1\47\1\50\1\51\1\10\1\52\1\53\1\10"+
    "\1\54\1\55\1\56\1\57\1\5\6\0\1\60\32\0"+
    "\2\5\4\10\4\5\1\10\2\5\1\0\7\5\1\10"+
    "\4\5\1\10\5\5\27\10\1\5\37\10\1\5\u01ca\10"+
    "\4\5\14\10\16\5\5\10\7\5\1\10\1\5\1\10"+
    "\21\5\160\0\5\10\1\5\2\10\2\5\4\10\1\5"+
    "\1\10\6\5\1\10\1\5\3\10\1\5\1\10\1\5"+
    "\24\10\1\5\123\10\1\5\213\10\1\5\5\0\2\5"+
    "\246\10\1\5\46\10\2\5\1\10\6\5\51\10\6\5"+
    "\1\10\1\5\55\0\1\5\1\0\1\5\2\0\1\5"+
    "\2\0\1\5\1\0\10\5\33\10\4\5\4\10\15\5"+
    "\6\0\5\5\1\10\4\5\13\0\1\5\1\0\3\5"+
    "\53\10\25\0\12\24\4\5\2\10\1\0\143\10\1\5"+
    "\1\10\10\0\1\5\6\0\2\10\2\0\1\5\4\0"+
    "\2\10\12\24\3\10\2\5\1\10\17\5\1\0\1\10"+
    "\1\0\36\10\33\0\2\5\131\10\13\0\1\10\16\5"+
    "\12\24\41\10\11\0\2\10\4\5\1\10\2\5\1\0"+
    "\30\10\4\0\1\10\11\0\1\10\3\0\1\10\5\0"+
    "\22\5\31\10\3\0\4\5\13\10\65\5\25\10\1\5"+
    "\22\10\13\5\61\0\66\10\3\0\1\10\22\0\1\10"+
    "\7\0\12\10\2\0\2\5\12\24\1\5\20\10\3\0"+
    "\1\5\10\10\2\5\2\10\2\5\26\10\1\5\7\10"+
    "\1\5\1\10\3\5\4\10\2\5\1\0\1\10\7\0"+
    "\2\5\2\0\2\5\3\0\1\10\10\5\1\0\4\5"+
    "\2\10\1\5\3\10\2\0\2\5\12\24\4\10\7\5"+
    "\2\10\1\5\1\0\2\5\3\0\1\5\6\10\4\5"+
    "\2\10\2\5\26\10\1\5\7\10\1\5\2\10\1\5"+
    "\2\10\1\5\2\10\2\5\1\0\1\5\5\0\4\5"+
    "\2\0\2\5\3\0\3\5\1\0\7\5\4\10\1\5"+
    "\1\10\7\5\12\24\2\0\3\10\1\0\13\5\3\0"+
    "\1\5\11\10\1\5\3\10\1\5\26\10\1\5\7\10"+
    "\1\5\2\10\1\5\5\10\2\5\1\0\1\10\10\0"+
    "\1\5\3\0\1\5\3\0\2\5\1\10\17\5\2\10"+
    "\2\0\2\5\12\24\1\5\1\10\7\5\1\10\6\0"+
    "\1\5\3\0\1\5\10\10\2\5\2\10\2\5\26\10"+
    "\1\5\7\10\1\5\2\10\1\5\5\10\2\5\1\0"+
    "\1\10\7\0\2\5\2\0\2\5\3\0\7\5\3\0"+
    "\4\5\2\10\1\5\3\10\2\0\2\5\12\24\1\5"+
    "\1\10\20\5\1\0\1\10\1\5\6\10\3\5\3\10"+
    "\1\5\4\10\3\5\2\10\1\5\1\10\1\5\2\10"+
    "\3\5\2\10\3\5\3\10\3\5\14\10\4\5\5\0"+
    "\3\5\3\0\1\5\4\0\2\5\1\10\6\5\1\0"+
    "\16\5\12\24\11\5\1\10\6\5\5\0\10\10\1\5"+
    "\3\10\1\5\27\10\1\5\20\10\3\5\1\10\7\0"+
    "\1\5\3\0\1\5\4\0\7\5\2\0\1\5\3\10"+
    "\5\5\2\10\2\0\2\5\12\24\20\5\1\10\3\0"+
    "\1\5\10\10\1\5\3\10\1\5\27\10\1\5\12\10"+
    "\1\5\5\10\2\5\1\0\1\10\7\0\1\5\3\0"+
    "\1\5\4\0\7\5\2\0\7\5\1\10\1\5\2\10"+
    "\2\0\2\5\12\24\1\5\2\10\15\5\4\0\11\10"+
    "\1\5\3\10\1\5\51\10\2\0\1\10\7\0\1\5"+
    "\3\0\1\5\4\0\1\10\5\5\3\10\1\0\7\5"+
    "\3\10\2\0\2\5\12\24\12\5\6\10\1\5\3\0"+
    "\1\5\22\10\3\5\30\10\1\5\11\10\1\5\1\10"+
    "\2\5\7\10\3\5\1\0\4\5\6\0\1\5\1\0"+
    "\1\5\10\0\6\5\12\24\2\5\2\0\15\5\60\10"+
    "\1\0\2\10\7\0\4\5\10\10\10\0\1\5\12\24"+
    "\47\5\2\10\1\5\1\10\1\5\5\10\1\5\30\10"+
    "\1\5\1\10\1\5\12\10\1\0\2\10\11\0\1\10"+
    "\2\5\5\10\1\5\1\10\1\5\6\0\2\5\12\24"+
    "\2\5\4\10\40\5\1\10\27\5\2\0\6\5\12\24"+
    "\13\5\1\0\1\5\1\0\1\5\1\0\4\5\2\0"+
    "\10\10\1\5\44\10\4\5\24\0\1\5\2\0\5\10"+
    "\13\0\1\5\44\0\11\5\1\0\71\5\53\10\24\0"+
    "\1\10\12\24\6\5\6\10\4\0\4\10\3\0\1\10"+
    "\3\0\2\10\7\0\3\10\4\0\15\10\14\0\1\10"+
    "\1\0\12\24\4\0\2\5\46\10\1\5\1\10\5\5"+
    "\1\10\2\5\53\10\1\5\115\10\1\5\4\10\2\5"+
    "\7\10\1\5\1\10\1\5\4\10\2\5\51\10\1\5"+
    "\4\10\2\5\41\10\1\5\4\10\2\5\7\10\1\5"+
    "\1\10\1\5\4\10\2\5\17\10\1\5\71\10\1\5"+
    "\4\10\2\5\103\10\2\5\3\0\40\5\20\10\20\5"+
    "\126\10\2\5\6\10\3\5\u016c\10\2\5\21\10\1\5"+
    "\32\10\5\5\113\10\3\5\13\10\7\5\15\10\1\5"+
    "\4\10\3\0\13\5\22\10\3\0\13\5\22\10\2\0"+
    "\14\5\15\10\1\5\3\10\1\5\2\0\14\5\64\10"+
    "\40\0\3\5\1\10\3\5\2\10\1\0\2\5\12\24"+
    "\41\5\4\0\1\5\12\24\6\5\131\10\7\5\5\10"+
    "\2\0\42\10\1\0\1\10\5\5\106\10\12\5\37\10"+
    "\1\5\14\0\4\5\14\0\12\5\12\24\36\10\2\5"+
    "\5\10\13\5\54\10\4\5\32\10\6\5\12\24\46\5"+
    "\27\10\5\0\4\5\65\10\12\0\1\5\35\0\2\5"+
    "\1\0\12\24\6\5\12\24\15\5\1\10\10\5\16\0"+
    "\1\5\2\0\77\5\5\0\57\10\21\0\7\10\4\5"+
    "\12\24\21\5\11\0\14\5\3\0\36\10\15\0\2\10"+
    "\12\24\54\10\16\0\14\5\44\10\24\0\10\5\12\24"+
    "\3\5\3\10\12\24\44\10\2\5\11\10\7\5\53\10"+
    "\2\5\3\10\20\5\3\0\1\5\25\0\4\10\1\0"+
    "\6\10\1\0\2\10\3\0\1\10\5\5\300\10\72\0"+
    "\1\5\5\0\26\10\2\5\6\10\2\5\46\10\2\5"+
    "\6\10\2\5\10\10\1\5\1\10\1\5\1\10\1\5"+
    "\1\10\1\5\37\10\2\5\65\10\1\5\7\10\1\5"+
    "\1\10\3\5\3\10\1\5\7\10\3\5\4\10\2\5"+
    "\6\10\4\5\15\10\5\5\3\10\1\5\7\10\16\5"+
    "\5\0\30\5\2\3\5\0\20\5\2\10\23\5\1\10"+
    "\13\5\5\0\1\5\12\0\1\5\1\10\15\5\1\10"+
    "\20\5\15\10\3\5\40\10\20\5\15\0\4\5\1\0"+
    "\3\5\14\0\21\5\1\10\4\5\1\10\2\5\12\10"+
    "\1\5\1\10\3\5\5\10\6\5\1\10\1\5\1\10"+
    "\1\5\1\10\1\5\4\10\1\5\13\10\2\5\4\10"+
    "\5\5\5\10\4\5\1\10\21\5\51\10\u0177\5\57\10"+
    "\1\5\57\10\1\5\205\10\6\5\4\10\3\0\2\10"+
    "\14\5\46\10\1\5\1\10\5\5\1\10\2\5\70\10"+
    "\7\5\1\10\17\5\1\0\27\10\11\5\7\10\1\5"+
    "\7\10\1\5\7\10\1\5\7\10\1\5\7\10\1\5"+
    "\7\10\1\5\7\10\1\5\7\10\1\5\40\0\57\5"+
    "\1\10\325\5\3\10\31\5\11\10\6\0\1\5\5\10"+
    "\2\5\5\10\4\5\126\10\2\5\2\0\2\5\3\10"+
    "\1\5\132\10\1\5\4\10\5\5\53\10\1\5\136\10"+
    "\21\5\40\10\60\5\320\10\100\5\375\10\3\5\215\10"+
    "\103\5\56\10\2\5\15\10\3\5\20\10\12\24\2\10"+
    "\24\5\57\10\1\0\4\5\12\0\1\5\37\10\2\0"+
    "\120\10\2\0\45\5\11\10\2\5\147\10\2\5\65\10"+
    "\2\5\11\10\52\5\15\10\1\0\3\10\1\0\4\10"+
    "\1\0\27\10\5\0\4\5\1\0\13\5\1\10\7\5"+
    "\64\10\14\5\2\0\62\10\22\0\12\5\12\24\6\5"+
    "\22\0\6\10\3\5\1\10\1\5\2\10\1\0\12\24"+
    "\34\10\10\0\2\5\27\10\15\0\14\5\35\10\3\5"+
    "\4\0\57\10\16\0\16\5\1\10\12\24\6\5\5\10"+
    "\1\0\12\10\12\24\5\10\1\5\51\10\16\0\11\5"+
    "\3\10\1\0\10\10\2\0\2\5\12\24\6\5\27\10"+
    "\3\5\1\10\3\0\62\10\1\0\1\10\3\0\2\10"+
    "\2\0\5\10\2\0\1\10\1\0\1\10\30\5\3\10"+
    "\2\5\13\10\5\0\2\5\3\10\2\0\12\5\6\10"+
    "\2\5\6\10\2\5\6\10\11\5\7\10\1\5\7\10"+
    "\1\5\53\10\1\5\16\10\6\5\163\10\10\0\1\5"+
    "\2\0\2\5\12\24\6\5\244\10\14\5\27\10\4\5"+
    "\61\10\4\5\u0100\3\156\10\2\5\152\10\46\5\7\10"+
    "\14\5\5\10\5\5\1\10\1\0\12\10\1\5\15\10"+
    "\1\5\5\10\1\5\1\10\1\5\2\10\1\5\2\10"+
    "\1\5\154\10\41\5\153\10\22\5\100\10\2\5\66\10"+
    "\50\5\15\10\3\5\20\0\20\5\20\0\3\5\2\10"+
    "\30\5\3\10\31\5\1\10\6\5\5\10\1\5\207\10"+
    "\2\5\1\0\4\5\1\10\13\5\12\24\7\5\32\10"+
    "\4\5\1\10\1\5\32\10\13\5\131\10\3\5\6\10"+
    "\2\5\6\10\2\5\6\10\2\5\3\10\3\5\2\10"+
    "\3\5\2\10\22\5\3\0\4\5\14\10\1\5\32\10"+
    "\1\5\23\10\1\5\2\10\1\5\17\10\2\5\16\10"+
    "\42\5\173\10\105\5\65\10\210\5\1\0\202\5\35\10"+
    "\3\5\61\10\17\5\1\0\37\5\40\10\15\5\36\10"+
    "\5\5\46\10\5\0\5\5\36\10\2\5\44\10\4\5"+
    "\10\10\1\5\5\10\52\5\236\10\2\5\12\24\6\5"+
    "\44\10\4\5\44\10\4\5\50\10\10\5\64\10\234\5"+
    "\67\10\11\5\26\10\12\5\10\10\230\5\6\10\2\5"+
    "\1\10\1\5\54\10\1\5\2\10\3\5\1\10\2\5"+
    "\27\10\12\5\27\10\11\5\37\10\101\5\23\10\1\5"+
    "\2\10\12\5\26\10\12\5\32\10\106\5\70\10\6\5"+
    "\2\10\100\5\1\10\3\0\1\5\2\0\5\5\4\0"+
    "\4\10\1\5\3\10\1\5\35\10\2\5\3\0\4\5"+
    "\1\0\40\5\35\10\3\5\35\10\43\5\10\10\1\5"+
    "\34\10\2\0\31\5\66\10\12\5\26\10\12\5\23\10"+
    "\15\5\22\10\156\5\111\10\67\5\63\10\15\5\63\10"+
    "\15\5\44\10\4\0\10\5\12\24\u0146\5\52\10\1\5"+
    "\2\0\3\5\2\10\116\5\35\10\12\5\1\10\10\5"+
    "\26\10\13\0\137\5\25\10\33\5\27\10\11\5\3\0"+
    "\65\10\17\0\37\5\12\24\17\5\4\0\55\10\13\0"+
    "\2\5\1\0\17\5\1\0\2\5\31\10\7\5\12\24"+
    "\6\5\3\0\44\10\16\0\1\5\12\24\4\5\1\10"+
    "\2\0\1\10\10\5\43\10\1\0\2\5\1\10\11\5"+
    "\3\0\60\10\16\0\4\10\4\5\4\0\1\5\2\0"+
    "\12\24\1\10\1\5\1\10\43\5\22\10\1\5\31\10"+
    "\14\0\6\5\1\0\101\5\7\10\1\5\1\10\1\5"+
    "\4\10\1\5\17\10\1\5\12\10\7\5\57\10\14\0"+
    "\5\5\12\24\6\5\4\0\1\5\10\10\2\5\2\10"+
    "\2\5\26\10\1\5\7\10\1\5\2\10\1\5\5\10"+
    "\1\5\2\0\1\10\7\0\2\5\2\0\2\5\3\0"+
    "\2\5\1\10\6\5\1\0\5\5\5\10\2\0\2\5"+
    "\7\0\3\5\5\0\213\5\65\10\22\0\4\10\5\5"+
    "\12\24\4\5\1\0\3\10\36\5\60\10\24\0\2\10"+
    "\1\5\1\10\10\5\12\24\246\5\57\10\7\0\2\5"+
    "\11\0\27\5\4\10\2\0\42\5\60\10\21\0\3\5"+
    "\1\10\13\5\12\24\46\5\53\10\15\0\1\10\7\5"+
    "\12\24\66\5\33\10\2\5\17\0\4\5\12\24\306\5"+
    "\54\10\17\0\145\5\100\10\12\24\25\5\10\10\2\5"+
    "\1\10\2\5\10\10\1\5\2\10\1\5\30\10\6\0"+
    "\1\5\2\0\2\5\4\0\1\10\1\0\1\10\2\0"+
    "\14\5\12\0\106\5\10\10\2\5\47\10\7\0\2\5"+
    "\7\0\1\10\1\5\1\10\1\0\33\5\1\10\12\0"+
    "\50\10\7\0\1\10\4\0\10\5\1\0\10\5\1\10"+
    "\13\0\56\10\20\0\3\5\1\10\42\5\71\10\7\5"+
    "\11\10\1\5\45\10\10\0\1\5\10\0\1\10\17\5"+
    "\12\24\30\5\36\10\2\5\26\0\1\5\16\0\111\5"+
    "\7\10\1\5\2\10\1\5\46\10\6\0\3\5\1\0"+
    "\1\5\2\0\1\5\7\0\1\10\1\0\10\5\12\24"+
    "\6\5\6\10\1\5\2\10\1\5\40\10\5\0\1\5"+
    "\2\0\1\5\5\0\1\10\7\5\12\24\u0136\5\23\10"+
    "\4\0\271\5\1\10\54\5\4\10\37\5\232\10\146\5"+
    "\157\10\21\5\304\10\274\5\57\10\1\5\11\0\307\5"+
    "\107\10\271\5\71\10\7\5\37\10\1\5\12\24\146\5"+
    "\36\10\2\5\5\0\13\5\60\10\7\0\11\5\4\10"+
    "\14\5\12\24\11\5\25\10\5\5\23\10\260\5\100\10"+
    "\200\5\113\10\4\5\1\0\1\10\67\0\7\5\4\0"+
    "\15\10\100\5\2\10\1\5\1\10\1\0\13\5\2\0"+
    "\16\5\370\10\10\5\326\10\52\5\11\10\367\5\37\10"+
    "\61\5\3\10\21\5\4\10\10\5\u018c\10\4\5\153\10"+
    "\5\5\15\10\3\5\11\10\7\5\12\10\3\5\2\0"+
    "\1\5\4\0\301\5\5\0\3\5\26\0\2\5\7\0"+
    "\36\5\4\0\224\5\3\0\273\5\125\10\1\5\107\10"+
    "\1\5\2\10\2\5\1\10\2\5\2\10\2\5\4\10"+
    "\1\5\14\10\1\5\1\10\1\5\7\10\1\5\101\10"+
    "\1\5\4\10\2\5\10\10\1\5\7\10\1\5\34\10"+
    "\1\5\4\10\1\5\5\10\1\5\1\10\3\5\7\10"+
    "\1\5\u0154\10\2\5\31\10\1\5\31\10\1\5\37\10"+
    "\1\5\31\10\1\5\37\10\1\5\31\10\1\5\37\10"+
    "\1\5\31\10\1\5\37\10\1\5\31\10\1\5\10\10"+
    "\2\5\62\24\67\0\4\5\62\0\10\5\1\0\16\5"+
    "\1\0\26\5\5\0\1\5\17\0\120\5\7\0\1\5"+
    "\21\0\2\5\7\0\1\5\2\0\1\5\5\0\325\5"+
    "\55\10\3\5\7\0\7\10\2\5\12\24\4\5\1\10"+
    "\u0171\5\54\10\4\0\12\24\5\5\306\10\13\5\7\0"+
    "\51\5\104\10\7\0\1\10\4\5\12\24\u0156\5\1\10"+
    "\117\5\4\10\1\5\33\10\1\5\2\10\1\5\1\10"+
    "\2\5\1\10\1\5\12\10\1\5\4\10\1\5\1\10"+
    "\1\5\1\10\6\5\1\10\4\5\1\10\1\5\1\10"+
    "\1\5\1\10\1\5\3\10\1\5\2\10\1\5\1\10"+
    "\2\5\1\10\1\5\1\10\1\5\1\10\1\5\1\10"+
    "\1\5\1\10\1\5\2\10\1\5\1\10\2\5\4\10"+
    "\1\5\7\10\1\5\4\10\1\5\4\10\1\5\1\10"+
    "\1\5\12\10\1\5\21\10\5\5\3\10\1\5\5\10"+
    "\1\5\21\10\u0134\5\12\0\6\5\336\10\42\5\65\10"+
    "\13\5\336\10\2\5\u0182\10\16\5\u0131\10\37\5\36\10"+
    "\342\5\113\10\266\5\1\0\36\5\140\0\200\5\360\0"+
    "\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\14\1\15\1\16"+
    "\1\17\1\20\10\4\1\21\1\1\1\22\1\2\1\23"+
    "\1\24\2\0\1\25\1\26\1\0\1\27\1\0\1\30"+
    "\1\31\1\32\4\4\1\33\5\4\1\34\1\35\1\36"+
    "\5\0\1\2\1\37\3\4\1\40\1\41\4\4\1\42"+
    "\1\43\1\44\1\45\1\0\2\4\1\46\4\4\1\0"+
    "\1\47\4\4\1\50\1\51\1\4\1\52\1\53\1\54"+
    "\1\4\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\142\0\223\0\304\0\365\0\u0126"+
    "\0\142\0\142\0\142\0\142\0\142\0\u0157\0\u0188\0\u01b9"+
    "\0\u01ea\0\142\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310"+
    "\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\142\0\u0436\0\142"+
    "\0\u0467\0\142\0\142\0\u0498\0\u04c9\0\142\0\142\0\u04fa"+
    "\0\u052b\0\u055c\0\142\0\142\0\142\0\u058d\0\u05be\0\u05ef"+
    "\0\u0620\0\304\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\142"+
    "\0\142\0\142\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b"+
    "\0\u055c\0\u086c\0\u089d\0\u08ce\0\304\0\304\0\u08ff\0\u0930"+
    "\0\u0961\0\u0992\0\142\0\142\0\142\0\142\0\u09c3\0\u09f4"+
    "\0\u0a25\0\304\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\304"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\304\0\142\0\u0c0f\0\304"+
    "\0\304\0\304\0\u0c40\0\304";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\0\1\4\1\3\1\5\1\3\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\6"+
    "\1\3\1\6\1\26\1\27\1\30\1\31\1\6\1\32"+
    "\4\6\1\33\1\34\2\6\1\35\2\6\1\36\1\37"+
    "\1\40\1\0\3\4\1\0\11\4\1\41\42\4\111\0"+
    "\1\42\31\0\1\6\7\0\1\6\11\0\3\6\4\0"+
    "\1\6\1\0\22\6\3\0\1\6\11\0\1\43\47\0"+
    "\7\44\1\0\2\44\1\0\17\44\1\45\26\44\30\0"+
    "\1\46\45\0\1\47\3\0\1\50\61\0\2\51\1\21"+
    "\26\0\1\52\27\0\3\21\63\0\1\53\60\0\1\54"+
    "\60\0\1\55\31\0\1\6\7\0\1\6\11\0\3\6"+
    "\4\0\1\6\1\0\13\6\1\56\6\6\3\0\2\6"+
    "\7\0\1\6\11\0\3\6\4\0\1\6\1\0\12\6"+
    "\1\57\7\6\3\0\2\6\7\0\1\6\11\0\3\6"+
    "\4\0\1\6\1\0\10\6\1\60\11\6\3\0\2\6"+
    "\7\0\1\6\11\0\3\6\4\0\1\6\1\0\12\6"+
    "\1\61\7\6\3\0\2\6\7\0\1\6\11\0\3\6"+
    "\4\0\1\6\1\0\4\6\1\62\4\6\1\63\10\6"+
    "\3\0\2\6\7\0\1\6\11\0\3\6\4\0\1\6"+
    "\1\0\3\6\1\64\16\6\3\0\2\6\7\0\1\6"+
    "\11\0\3\6\4\0\1\6\1\0\6\6\1\65\6\6"+
    "\1\66\4\6\3\0\2\6\7\0\1\6\11\0\3\6"+
    "\4\0\1\6\1\0\5\6\1\67\14\6\3\0\1\6"+
    "\56\0\1\70\23\0\1\71\51\0\1\72\55\0\1\73"+
    "\2\0\1\74\31\0\1\75\3\0\1\76\2\0\1\77"+
    "\5\0\2\50\1\4\1\50\1\100\54\50\22\0\2\51"+
    "\1\21\56\0\3\101\4\0\1\101\1\0\5\101\21\0"+
    "\1\6\7\0\1\6\11\0\3\6\4\0\1\6\1\0"+
    "\3\6\1\102\16\6\3\0\2\6\7\0\1\6\11\0"+
    "\3\6\4\0\1\6\1\0\11\6\1\103\10\6\3\0"+
    "\2\6\7\0\1\6\11\0\3\6\4\0\1\6\1\0"+
    "\14\6\1\104\5\6\3\0\2\6\7\0\1\6\11\0"+
    "\3\6\4\0\1\6\1\0\13\6\1\105\6\6\3\0"+
    "\2\6\7\0\1\6\11\0\3\6\4\0\1\6\1\0"+
    "\15\6\1\106\4\6\3\0\2\6\7\0\1\6\11\0"+
    "\3\6\4\0\1\6\1\0\15\6\1\107\4\6\3\0"+
    "\2\6\7\0\1\6\11\0\3\6\4\0\1\6\1\0"+
    "\21\6\1\110\3\0\2\6\7\0\1\6\11\0\3\6"+
    "\4\0\1\6\1\0\13\6\1\111\6\6\3\0\2\6"+
    "\7\0\1\6\11\0\3\6\4\0\1\6\1\0\6\6"+
    "\1\112\13\6\3\0\1\6\12\0\1\113\60\0\1\114"+
    "\60\0\1\115\60\0\1\116\70\0\3\117\4\0\1\117"+
    "\1\0\5\117\23\0\1\4\56\0\1\6\7\0\1\6"+
    "\11\0\3\6\4\0\1\6\1\0\1\120\21\6\3\0"+
    "\2\6\7\0\1\6\11\0\3\6\4\0\1\6\1\0"+
    "\15\6\1\121\4\6\3\0\2\6\7\0\1\6\11\0"+
    "\3\6\4\0\1\6\1\0\3\6\1\122\16\6\3\0"+
    "\2\6\7\0\1\6\11\0\3\6\4\0\1\6\1\0"+
    "\16\6\1\123\3\6\3\0\2\6\7\0\1\6\11\0"+
    "\3\6\4\0\1\6\1\0\3\6\1\124\16\6\3\0"+
    "\2\6\7\0\1\6\11\0\3\6\4\0\1\6\1\0"+
    "\16\6\1\125\3\6\3\0\2\6\7\0\1\6\11\0"+
    "\3\6\4\0\1\6\1\0\10\6\1\126\11\6\3\0"+
    "\1\6\22\0\3\127\4\0\1\127\1\0\5\127\21\0"+
    "\1\6\7\0\1\6\11\0\3\6\4\0\1\6\1\0"+
    "\7\6\1\130\12\6\3\0\2\6\7\0\1\6\11\0"+
    "\3\6\4\0\1\6\1\0\6\6\1\131\13\6\3\0"+
    "\2\6\7\0\1\6\11\0\3\6\4\0\1\6\1\0"+
    "\13\6\1\132\6\6\3\0\2\6\7\0\1\6\11\0"+
    "\3\6\4\0\1\6\1\0\12\6\1\133\7\6\3\0"+
    "\2\6\7\0\1\6\11\0\3\6\4\0\1\6\1\0"+
    "\2\6\1\134\17\6\3\0\2\6\7\0\1\6\11\0"+
    "\3\6\4\0\1\6\1\0\3\6\1\135\16\6\3\0"+
    "\1\6\12\0\1\136\46\0\1\6\7\0\1\6\11\0"+
    "\3\6\4\0\1\6\1\0\11\6\1\137\10\6\3\0"+
    "\2\6\7\0\1\6\11\0\3\6\4\0\1\6\1\0"+
    "\11\6\1\140\10\6\3\0\2\6\7\0\1\6\11\0"+
    "\3\6\4\0\1\6\1\0\4\6\1\141\15\6\3\0"+
    "\2\6\7\0\1\6\11\0\3\6\4\0\1\6\1\0"+
    "\15\6\1\142\4\6\3\0\2\6\7\0\1\6\11\0"+
    "\3\6\4\0\1\6\1\0\16\6\1\143\3\6\3\0"+
    "\2\6\7\0\1\6\11\0\3\6\4\0\1\6\1\0"+
    "\3\6\1\144\16\6\3\0\1\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3185];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\4\1\5\11\4\1\1\11\13\1\1\11"+
    "\1\1\1\11\1\1\2\11\2\0\2\11\1\0\1\1"+
    "\1\0\3\11\12\1\3\11\5\0\13\1\4\11\1\0"+
    "\7\1\1\0\6\1\1\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int id)
    {
	return new Symbol(id, yyline, yycolumn);
    }

    private Symbol symbol(int id, Object value)
    {
	return new Symbol(id, yyline, yycolumn, value);
    }

	static int decodeHexa(String s) {
		return Integer.decode("0x" + s.substring(3, 5));
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException, Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case COMMENT: {
              throw new Exception(String.format(
        "Line %d, column %d: unclosed comment\n", yyline, yycolumn));
            }  // fall though
            case 101: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Exception (String.format(
        "Line %d, column %d: illegal character: '%s'\n", yyline, yycolumn, yytext()
      ));
            }
            // fall through
          case 46: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 47: break;
          case 3:
            { return symbol(NOT);
            }
            // fall through
          case 48: break;
          case 4:
            { return symbol(IDENT, yytext().intern());
            }
            // fall through
          case 49: break;
          case 5:
            { return symbol(LP);
            }
            // fall through
          case 50: break;
          case 6:
            { return symbol(RP);
            }
            // fall through
          case 51: break;
          case 7:
            { return symbol(TIMES);
            }
            // fall through
          case 52: break;
          case 8:
            { return symbol(PLUS);
            }
            // fall through
          case 53: break;
          case 9:
            { return symbol(COMMA);
            }
            // fall through
          case 54: break;
          case 10:
            { return symbol(MINUS);
            }
            // fall through
          case 55: break;
          case 11:
            { return symbol(DIV);
            }
            // fall through
          case 56: break;
          case 12:
            { return symbol(INTEGER, Integer.parseInt(yytext()));
            }
            // fall through
          case 57: break;
          case 13:
            { return symbol(SEMICOLON);
            }
            // fall through
          case 58: break;
          case 14:
            { return symbol(CMP, Binop.Blt);
            }
            // fall through
          case 59: break;
          case 15:
            { return symbol(EQUAL);
            }
            // fall through
          case 60: break;
          case 16:
            { return symbol(CMP, Binop.Bgt);
            }
            // fall through
          case 61: break;
          case 17:
            { return symbol(LBRA);
            }
            // fall through
          case 62: break;
          case 18:
            { return symbol(RBRA);
            }
            // fall through
          case 63: break;
          case 19:
            { return symbol(NEQ);
            }
            // fall through
          case 64: break;
          case 20:
            { return symbol(AMPAMP);
            }
            // fall through
          case 65: break;
          case 21:
            { return symbol(ARROW);
            }
            // fall through
          case 66: break;
          case 22:
            { yybegin(COMMENT);
            }
            // fall through
          case 67: break;
          case 23:
            { return symbol(INTEGER, Integer.parseInt(yytext(), 8));
            }
            // fall through
          case 68: break;
          case 24:
            { return symbol(CMP, Binop.Ble);
            }
            // fall through
          case 69: break;
          case 25:
            { return symbol(EQ);
            }
            // fall through
          case 70: break;
          case 26:
            { return symbol(CMP, Binop.Bge);
            }
            // fall through
          case 71: break;
          case 27:
            { return symbol(IF);
            }
            // fall through
          case 72: break;
          case 28:
            { return symbol(BARBAR);
            }
            // fall through
          case 73: break;
          case 29:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 74: break;
          case 30:
            { int c = yytext().charAt(1); return symbol(INTEGER, c);
            }
            // fall through
          case 75: break;
          case 31:
            { return symbol(INTEGER, Integer.decode(yytext()));
            }
            // fall through
          case 76: break;
          case 32:
            { return symbol(FOR);
            }
            // fall through
          case 77: break;
          case 33:
            { return symbol(INT);
            }
            // fall through
          case 78: break;
          case 34:
            { return symbol(INTEGER, 34);
            }
            // fall through
          case 79: break;
          case 35:
            { return symbol(INTEGER, 39);
            }
            // fall through
          case 80: break;
          case 36:
            { return symbol(INTEGER, 10);
            }
            // fall through
          case 81: break;
          case 37:
            { return symbol(INTEGER, 9);
            }
            // fall through
          case 82: break;
          case 38:
            { return symbol(ELSE);
            }
            // fall through
          case 83: break;
          case 39:
            { return symbol(BREAK);
            }
            // fall through
          case 84: break;
          case 40:
            { return symbol(WHILE);
            }
            // fall through
          case 85: break;
          case 41:
            { return symbol(INTEGER, decodeHexa(yytext()));
            }
            // fall through
          case 86: break;
          case 42:
            { return symbol(RETURN);
            }
            // fall through
          case 87: break;
          case 43:
            { return symbol(SIZEOF);
            }
            // fall through
          case 88: break;
          case 44:
            { return symbol(STRUCT);
            }
            // fall through
          case 89: break;
          case 45:
            { return symbol(CONTINUE);
            }
            // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   */
  private static String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException, Exception {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
